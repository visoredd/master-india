export const initialState = {
  users: [
    {
      id: 2,
      email: "test@gmail.com",
      password: "123456",
    },
  ],
  savedData: [],
  data: [
    {
      id: 1,
      title: "_renderer.js/fs.readdirSync.forEach",
      source: "origin: GitSquared/edex-ui",
      code: [
        "fs.readdirSync(themesDir).forEach(th => {",
        "   if (!th.endsWith('.json')) return;",
        "   th = th.replace('.json', '');",
        "   if (th === window.settings.theme) return;",
        "   themes += `<option>${th}</option>`;",
        "});",
      ],
    },
    {
      id: 2,
      title: "assets/vendor/encom-globe.js/getNextVertexInPool",
      source: "origin: GitSquared/edex-ui",
      code: [
        "function getNextVertexInPool() {",
        "",
        "   if ( _vertexCount === _vertexPoolLength ) {",
        "",
        "      var vertex = new THREE.RenderableVertex();",
        "      _vertexPool.push( vertex );",
        "      _vertexPoolLength ++;",
        "      _vertexCount ++;",
        "      return vertex;",
        "",
        "    }",
        "",
        "    return _vertexPool[ _vertexCount ++ ];",
        "}",
      ],
    },
    {
      id: 3,
      title: "assets/vendor/encom-globe.js/generateDefines",
      source: "origin: GitSquared/edex-ui",
      code: [
        "// Defines",
        "  function generateDefines ( defines ) {",
        "",
        "      var value, chunk, chunks = [];",
        "      for ( var d in defines ) {",
        "",
        "         value = defines[ d ];",
        "         if ( value === false ) continue;",
        "",
        "         chunk = '#define ' + d + ' ' + value;",
        "         chunks.push( chunk );",
        "",
        "      }",
        "",
        "    return chunks.join( '\\n' );",
        "",
        "   }",
      ],
    },
    {
      id: 4,
      title: "tests/utils/get-buffer-from-stream.js/getBufferFromStream",
      source: "origin: Netflix/pollyjs",
      code: [
        "export default function getBufferFromStream(stream) {",
        "",
        "   return new Promise(resolve => {",
        "     const chunks = [];",
        "",
        "     stream.on('data', chunk => {",
        "        chunks.push(chunk);",
        "     });",
        "",
        "     stream.on('end', () => {",
        "        resolve(Buffer.concat(chunks));",
        "     });",
        "   });",
        "}",
      ],
    },
    ,
    {
      id: 5,
      title:
        "translation-scanner.js/TranslationScanner/_sendPendingOriginalsImmediately",
      source: "origin: Automattic/wp-calypso",
      code: [
        "_sendPendingOriginalsImmediately() {",
        "   const keys = Object.keys( this.pendingOriginals );",
        "   if ( keys.length ) {",
        "     debug( `Sending ${ keys.length } originals to GP_Record` );",
        "     recordOriginals( keys );",
        "     this.pendingOriginals = {};",
        "   }",
        "}",
      ],
    },
    {
      id: 6,
      title: "_renderer.js/fs.readdirSync.forEach",
      source: "origin: GitSquared/edex-ui",
      code: [
        "fs.readdirSync(themesDir).forEach(th => {",
        "   if (!th.endsWith('.json')) return;",
        "   th = th.replace('.json', '');",
        "   if (th === window.settings.theme) return;",
        "   themes += `<option>${th}</option>`;",
        "});",
      ],
    },
    {
      id: 7,
      title: "packages/@pollyjs/persister/src/har/entry.js/totalTime",
      source: "origin: Netflix/pollyjs",
      code: [
        "function generateRecordingName(context) {",
        "   return keys(timings).reduce(",
        "      (total, k) => (timings[k] > 0 ? (total += timings[k]) : total),",
        "    0",
        "    );",
        "}",
      ],
    },
    {
      id: 8,
      title: "tests/integration/adapter-identifier-tests.js/captureRequests",
      source: "origin: Netflix/pollyjs",
      code: [
        "function captureRequests(server) {",
        "   const reqs = [];",
        "",
        "   server.any().on('request', req => reqs.push(req));",
        "",
        "   return reqs;",
        "}",
      ],
    },
    {
      id: 9,
      title:
        "packages/@pollyjs/core/src/server/route.js/Route/_orderedHandlers",
      source: "origin: Netflix/pollyjs",
      code: [
        "_orderedHandlers() {",
        "   return [...this.middleware, this].reduce((handlers, route) => {",
        "      handlers.push(...route.handlers.map(handler => ({ route, handler })));",
        "",
        "      return handlers;",
        "   }, []);",
        "}",
      ],
    },
    {
      id: 10,
      title:
        "packages/@pollyjs/core/tests/unit/-private/event-emitter-test.js/it",
      source: "origin: Netflix/pollyjs",
      code: [
        "it('.emit() - stopPropagation', async function() {",

        "   const array = [];",
        "",
        "   emitter.on('a', async e => {",
        "      e.stopPropagation();",
        "      array.push(1);",
        "   });",
        "   emitter.on('a', () => array.push(2));",
        "",
        "   expect(await emitter.emit('a')).to.be.false;",
        "   expect(array).to.have.ordered.members([1]);",
        "});",
      ],
    },
  ],
  search: "",
  loggedInId: -1,
  showModal: false,
  showSavedData: false,
};
